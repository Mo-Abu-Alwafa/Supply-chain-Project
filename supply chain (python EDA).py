# -*- coding: utf-8 -*-
"""supply chain python EDA .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r3Ei7Vz_fc_e3Pz5kzLOKD2b5fvgOK_P

---
# 1. importing libraries
"""

# Import necessary libraries

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

# For more advanced visualizations

import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots

# Set visualization styles

plt.style.use('seaborn-v0_8-whitegrid')
sns.set(style="whitegrid")

# Display settings for better readability

pd.set_option('display.max_columns', None)
pd.set_option('display.max_rows', 20)
pd.set_option('display.float_format', '{:.2f}'.format)

"""---
# 2. Loading Data
"""

# Load the dataset

df = pd.read_csv('supply_chain_data.csv')

# Preview the first few rows

print("First 5 rows of the dataset:")
df.head()

"""---
# 3. Data Exploration
"""

# Check the shape of the dataset

print(f"Dataset dimensions: {df.shape[0]} rows and {df.shape[1]} columns\n")

# Check the data types of each column

print(" - Data types of each column:\n")
print(df.dtypes)

# Check for missing values

print("\n - Missing values in each column:\n")
print(df.isnull().sum())

# Check for duplicates

duplicate_count = df.duplicated().sum()
print(f"\n - Number of duplicate rows: {duplicate_count}")

# Get basic statistics

print("\n - Basic statistics of numerical columns:\n")
df.describe().T

"""---
# 4. EDA
  ## 4.1. Box plot and histogram (outliers & distribution check)
"""

# find numerical columns

numerical_cols = df.select_dtypes(include=['float64', 'int64']).columns.tolist()

# Create histograms for numerical variables

plt.figure(figsize=(20, 15))
for i, col in enumerate(numerical_cols[:12], 1):  # Analyze first 12 numerical columns
    plt.subplot(4, 3, i)
    sns.histplot(df[col], kde=True)
    plt.title(f'Distribution of {col}')
    plt.tight_layout()
plt.show()

# Box plots for numerical variables to detect outliers

plt.figure(figsize=(20, 15))
for i, col in enumerate(numerical_cols[:12], 1):
    plt.subplot(4, 3, i)
    sns.boxplot(y=df[col])
    plt.title(f'Boxplot of {col}')
    plt.tight_layout()
plt.show()

"""----
## 4.2. categorical data EDA
"""

# Select categorical columns

categorical_cols = df.select_dtypes(include=['object']).columns.tolist()

# Create count plots for categorical variables

plt.figure(figsize=(20, 15))
for i, col in enumerate(categorical_cols[3:9], 1):
    plt.subplot(3, 3, i)
    counts = df[col].value_counts()
    sns.barplot(x=counts.index, y=counts.values)
    plt.title(f'Count of {col}')
    plt.xticks(rotation=90)
    plt.tight_layout()
plt.show()

"""---
## 4.3. pattern and relationships
"""

# Relationship between product type and revenue

plt.figure(figsize=(10, 6))
sns.boxplot(x='Product type', y='Revenue generated', data=df)
plt.title('Revenue by Product Type')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Relationship between price and number of products sold

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Price', y='Number of products sold', data=df, hue='Product type')
plt.title('Price vs. Number of Products Sold')
plt.tight_layout()
plt.show()

# Relationship between availability and revenue

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Availability', y='Revenue generated', data=df, hue='Product type')
plt.title('Availability vs. Revenue')
plt.tight_layout()
plt.show()

"""---
# 5. product analysis
"""

# Aggregate data by product type

product_summary = df.groupby('Product type').agg({
    'Number of products sold': 'sum',
    'Revenue generated': 'sum',
    'Price': 'mean',
    'Availability': 'mean',
    'SKU': 'count'
}).rename(columns={'SKU': 'Number of SKUs'}).reset_index()

# Create a bar chart

fig = px.bar(product_summary, x='Product type', y='Revenue generated',
             hover_data=['Number of products sold', 'Price', 'Number of SKUs'],
             color='Product type', title='Revenue by Product Type')
fig.show()

# Calculate profit margin (assuming manufacturing cost is the only cost)

df['Profit Margin'] = (df['Price'] - df['Manufacturing costs']) / df['Price'] * 100

# Identify top-performing products
top_products = df.sort_values(by='Revenue generated', ascending=False).head(10)
print("Top 10 Products by Revenue:")
print(top_products[['Product type', 'SKU', 'Price', 'Number of products sold', 'Revenue generated']])

# Identify products with low stock levels
low_stock_products = df[df['Stock levels'] < df['Stock levels'].quantile(0.25)]
print("\nProducts with Low Stock Levels:")
print(low_stock_products[['Product type', 'SKU', 'Stock levels', 'Number of products sold']])

# Identify suppliers with quality issues
quality_issues = df[df['Inspection results'] == 'Fail']
supplier_quality = quality_issues.groupby('Supplier name').size().reset_index(name='Failure Count')
print("\nSuppliers with Quality Issues:")
print(supplier_quality.sort_values(by='Failure Count', ascending=False))

# Identify products with high shipping costs
high_shipping_cost = df[df['Shipping costs'] > df['Shipping costs'].quantile(0.75)]
print("\nProducts with High Shipping Costs:")
print(high_shipping_cost[['Product type', 'SKU', 'Shipping carriers', 'Transportation modes', 'Shipping costs']])

"""---
# 6. supplying analysis
"""

# Analyze lead times and supplier performance

supplier_performance = df.groupby('Supplier name').agg({
    'Lead time': 'mean',
    'Manufacturing lead time': 'mean',
    'Defect rates': 'mean',
    'Revenue generated': 'sum',
    'SKU': 'count'
}).rename(columns={'SKU': 'Number of SKUs'}).reset_index()

# Create a scatter plot

fig = px.scatter(supplier_performance, x='Lead time', y='Defect rates',
                 size='Revenue generated', color='Supplier name',
                 hover_data=['Manufacturing lead time', 'Number of SKUs'],
                 title='Supplier Performance Analysis')
fig.show()

# Shipping analysis

shipping_analysis = df.groupby(['Shipping carriers', 'Transportation modes']).agg({
    'Shipping times': 'mean',
    'Shipping costs': 'mean',
    'SKU': 'count'
}).rename(columns={'SKU': 'Number of Shipments'}).reset_index()

# Create a bubble chart

fig = px.scatter(shipping_analysis, x='Shipping times', y='Shipping costs',
                 size='Number of Shipments', color='Shipping carriers',
                 facet_col='Transportation modes', title='Shipping Performance by Carrier and Mode')
fig.show()

"""---
# 7. Customers analysis
"""

# Analyze customer demographics and their purchasing behavior

demographic_analysis = df.groupby('Customer demographics').agg({
    'Number of products sold': 'sum',
    'Revenue generated': 'sum',
    'SKU': 'count'
}).rename(columns={'SKU': 'Number of Products'}).reset_index()

# Create a pie chart for revenue by demographics

fig = px.pie(demographic_analysis, values='Revenue generated', names='Customer demographics',
             title='Revenue Distribution by Customer Demographics')
fig.show()

# Analyze product preferences by demographics

product_demographic = df.groupby(['Product type', 'Customer demographics']).agg({
    'Number of products sold': 'sum',
    'Revenue generated': 'sum'
}).reset_index()

# Create a grouped bar chart

fig = px.bar(product_demographic, x='Product type', y='Number of products sold',
             color='Customer demographics', barmode='group',
             title='Product Preferences by Customer Demographics')
fig.show()

"""---
# 8. Regional insights
"""

# Analyze performance by location

location_analysis = df.groupby('Location').agg({
    'Revenue generated': 'sum',
    'Lead time': 'mean',
    'Manufacturing lead time': 'mean',
    'Shipping times': 'mean',
    'Defect rates': 'mean',
    'SKU': 'count'
}).rename(columns={'SKU': 'Number of Products'}).reset_index()

# Create a comprehensive visualization

fig = make_subplots(rows=2, cols=2,
  subplot_titles=('Revenue by Location', 'Lead Time by Location',
     'Shipping Time by Location', 'Defect Rate by Location'))

fig.add_trace(
    go.Bar(x=location_analysis['Location'], y=location_analysis['Revenue generated'], name='Revenue'),
    row=1, col=1
)

fig.add_trace(
    go.Bar(x=location_analysis['Location'], y=location_analysis['Lead time'], name='Lead Time'),
    row=1, col=2
)

fig.add_trace(
    go.Bar(x=location_analysis['Location'], y=location_analysis['Shipping times'], name='Shipping Time'),
    row=2, col=1
)

fig.add_trace(
    go.Bar(x=location_analysis['Location'], y=location_analysis['Defect rates'], name='Defect Rate'),
    row=2, col=2
)

fig.update_layout(height=800, width=1000, title_text="Performance Metrics by Location")
fig.show()